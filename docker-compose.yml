version: '3.8'

services:
  # PostgreSQL 데이터베이스 (관계형 데이터)
  postgres:
    image: postgres:15-alpine
    container_name: lms_postgres
    environment:
      POSTGRES_DB: lms_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - lms_network
    restart: unless-stopped

  # MongoDB 데이터베이스 (문서형 데이터)
  mongodb:
    image: mongo:7.0
    container_name: lms_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: lms_mongo
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./server/db/mongodb-init.js:/docker-entrypoint-initdb.d/mongodb-init.js:ro
    networks:
      - lms_network
    restart: unless-stopped

  # pgAdmin (PostgreSQL 관리 도구)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: lms_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@lms.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_LOGIN_BANNER: "'LMS PostgreSQL 관리 도구'"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - lms_network
    restart: unless-stopped

  # mongo-express (MongoDB 관리 도구)
  mongo-express:
    image: mongo-express:latest
    container_name: lms_mongo_express
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://admin:password@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    ports:
      - "8081:8081"
    depends_on:
      - mongodb
    networks:
      - lms_network
    restart: unless-stopped

  # Redis 캐시
  redis:
    image: redis:7-alpine
    container_name: lms_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - lms_network
    restart: unless-stopped

  # RabbitMQ 메시지 큐
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: lms_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - lms_network
    restart: unless-stopped

  # 백엔드 서버
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: lms_server
    environment:
      NODE_ENV: production
      PORT: 5000
      # PostgreSQL 설정
      AUTH_SOURCE: postgresql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: lms_db
      DB_USER: postgres
      DB_PASSWORD: password
      # MongoDB 설정
      MONGO_URI: mongodb://admin:password@mongodb:27017/lms_mongo?authSource=admin
      # Redis 설정
      REDIS_URL: redis://redis:6379
      # RabbitMQ 설정
      RABBITMQ_URL: amqp://admin:password@rabbitmq:5672
      JWT_SECRET: your-super-secret-jwt-key-here
      OPENROUTER_API_KEY: your-openrouter-api-key
    ports:
      - "5000:5000"
    volumes:
      - ./server/uploads:/app/uploads
      - ./server/src:/app/src
    depends_on:
      - postgres
      - mongodb
      - redis
      - rabbitmq
    networks:
      - lms_network
    restart: unless-stopped

  # 프론트엔드 클라이언트
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: lms_client
    environment:
      REACT_APP_API_URL: http://server:5000  # 서비스명을 사용하도록 변경
      REACT_APP_ENV: development  # 개발 모드로 변경
      NODE_ENV: development  # 개발 모드 설정
      CHOKIDAR_USEPOLLING: 'true'  # 파일 감지 활성화
      WDS_SOCKET_PORT: 0  # WebSocket 포트 충돌 방지
    ports:
      - "3000:3000"  # 개발 서버 포트로 변경
    volumes:
      - ./client/src:/app/src
      - ./client/public:/app/public
      - /app/node_modules  # 컨테이너의 node_modules 유지
    depends_on:
      - server
    networks:
      - lms_network
    restart: unless-stopped
    stdin_open: true  # 인터랙티브 모드 활성화
    tty: true  # TTY 할당

  # Nginx 리버스 프록시
  nginx:
    image: nginx:alpine
    container_name: lms_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - client
      - server
    networks:
      - lms_network
    restart: unless-stopped

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  rabbitmq_data:
  pgadmin_data:

networks:
  lms_network:
    driver: bridge
